// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Sync.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

namespace {

const ::google::protobuf::Descriptor* MachineTimeSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineTimeSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineProcTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineProcTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineLightSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineLightSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* MachineTypeSpec_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MachineTypeSpec_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SyncInfo_CompType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* InitiateSync_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InitiateSync_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* InitiateSync_CompType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_Sync_2eproto() {
  protobuf_AddDesc_Sync_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Sync.proto");
  GOOGLE_CHECK(file != NULL);
  MachineTimeSpec_descriptor_ = file->message_type(0);
  static const int MachineTimeSpec_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTimeSpec, machine_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTimeSpec, gt_from_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTimeSpec, gt_to_),
  };
  MachineTimeSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineTimeSpec_descriptor_,
      MachineTimeSpec::default_instance_,
      MachineTimeSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTimeSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTimeSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineTimeSpec));
  MachineProcTime_descriptor_ = file->message_type(1);
  static const int MachineProcTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineProcTime, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineProcTime, proc_time_),
  };
  MachineProcTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineProcTime_descriptor_,
      MachineProcTime::default_instance_,
      MachineProcTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineProcTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineProcTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineProcTime));
  MachineLightSpec_descriptor_ = file->message_type(2);
  static const int MachineLightSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineLightSpec, machine_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineLightSpec, lights_),
  };
  MachineLightSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineLightSpec_descriptor_,
      MachineLightSpec::default_instance_,
      MachineLightSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineLightSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineLightSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineLightSpec));
  MachineTypeSpec_descriptor_ = file->message_type(3);
  static const int MachineTypeSpec_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTypeSpec, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTypeSpec, type_),
  };
  MachineTypeSpec_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MachineTypeSpec_descriptor_,
      MachineTypeSpec::default_instance_,
      MachineTypeSpec_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTypeSpec, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MachineTypeSpec, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MachineTypeSpec));
  SyncInfo_descriptor_ = file->message_type(4);
  static const int SyncInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, machines_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, down_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, delivery_gates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, proc_times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, exploration_lights_),
  };
  SyncInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncInfo_descriptor_,
      SyncInfo::default_instance_,
      SyncInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncInfo));
  SyncInfo_CompType_descriptor_ = SyncInfo_descriptor_->enum_type(0);
  InitiateSync_descriptor_ = file->message_type(5);
  static const int InitiateSync_offsets_[1] = {
  };
  InitiateSync_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InitiateSync_descriptor_,
      InitiateSync::default_instance_,
      InitiateSync_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateSync, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InitiateSync, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InitiateSync));
  InitiateSync_CompType_descriptor_ = InitiateSync_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Sync_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineTimeSpec_descriptor_, &MachineTimeSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineProcTime_descriptor_, &MachineProcTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineLightSpec_descriptor_, &MachineLightSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MachineTypeSpec_descriptor_, &MachineTypeSpec::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncInfo_descriptor_, &SyncInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InitiateSync_descriptor_, &InitiateSync::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Sync_2eproto() {
  delete MachineTimeSpec::default_instance_;
  delete MachineTimeSpec_reflection_;
  delete MachineProcTime::default_instance_;
  delete MachineProcTime_reflection_;
  delete MachineLightSpec::default_instance_;
  delete MachineLightSpec_reflection_;
  delete MachineTypeSpec::default_instance_;
  delete MachineTypeSpec_reflection_;
  delete SyncInfo::default_instance_;
  delete SyncInfo_reflection_;
  delete InitiateSync::default_instance_;
  delete InitiateSync_reflection_;
}

void protobuf_AddDesc_Sync_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::llsf_msgs::protobuf_AddDesc_MachineInfo_2eproto();
  ::llsf_msgs::protobuf_AddDesc_OrderInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\nSync.proto\022\tllsf_msgs\032\021MachineInfo.pro"
    "to\032\017OrderInfo.proto\"G\n\017MachineTimeSpec\022\024"
    "\n\014machine_name\030\001 \002(\t\022\017\n\007gt_from\030\002 \002(\002\022\r\n"
    "\005gt_to\030\003 \002(\002\":\n\017MachineProcTime\022\024\n\014machi"
    "ne_type\030\001 \002(\t\022\021\n\tproc_time\030\002 \002(\r\"N\n\020Mach"
    "ineLightSpec\022\024\n\014machine_type\030\001 \002(\t\022$\n\006li"
    "ghts\030\002 \003(\0132\024.llsf_msgs.LightSpec\"-\n\017Mach"
    "ineTypeSpec\022\014\n\004name\030\001 \002(\t\022\014\n\004type\030\002 \002(\t\""
    "\317\002\n\010SyncInfo\022,\n\010machines\030\002 \003(\0132\032.llsf_ms"
    "gs.MachineTypeSpec\022 \n\006orders\030\003 \003(\0132\020.lls"
    "f_msgs.Order\022.\n\ndown_times\030\004 \003(\0132\032.llsf_"
    "msgs.MachineTimeSpec\0222\n\016delivery_gates\030\005"
    " \003(\0132\032.llsf_msgs.MachineTimeSpec\022.\n\nproc"
    "_times\030\006 \003(\0132\032.llsf_msgs.MachineProcTime"
    "\0227\n\022exploration_lights\030\007 \003(\0132\033.llsf_msgs"
    ".MachineLightSpec\"&\n\010CompType\022\014\n\007COMP_ID"
    "\020\320\017\022\014\n\010MSG_TYPE\020\005\"6\n\014InitiateSync\"&\n\010Com"
    "pType\022\014\n\007COMP_ID\020\320\017\022\014\n\010MSG_TYPE\020\006B-\n\037org"
    ".robocup_logistics.llsf_msgsB\nSyncProtos", 760);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Sync.proto", &protobuf_RegisterTypes);
  MachineTimeSpec::default_instance_ = new MachineTimeSpec();
  MachineProcTime::default_instance_ = new MachineProcTime();
  MachineLightSpec::default_instance_ = new MachineLightSpec();
  MachineTypeSpec::default_instance_ = new MachineTypeSpec();
  SyncInfo::default_instance_ = new SyncInfo();
  InitiateSync::default_instance_ = new InitiateSync();
  MachineTimeSpec::default_instance_->InitAsDefaultInstance();
  MachineProcTime::default_instance_->InitAsDefaultInstance();
  MachineLightSpec::default_instance_->InitAsDefaultInstance();
  MachineTypeSpec::default_instance_->InitAsDefaultInstance();
  SyncInfo::default_instance_->InitAsDefaultInstance();
  InitiateSync::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Sync_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Sync_2eproto {
  StaticDescriptorInitializer_Sync_2eproto() {
    protobuf_AddDesc_Sync_2eproto();
  }
} static_descriptor_initializer_Sync_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int MachineTimeSpec::kMachineNameFieldNumber;
const int MachineTimeSpec::kGtFromFieldNumber;
const int MachineTimeSpec::kGtToFieldNumber;
#endif  // !_MSC_VER

MachineTimeSpec::MachineTimeSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineTimeSpec::InitAsDefaultInstance() {
}

MachineTimeSpec::MachineTimeSpec(const MachineTimeSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineTimeSpec::SharedCtor() {
  _cached_size_ = 0;
  machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  gt_from_ = 0;
  gt_to_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineTimeSpec::~MachineTimeSpec() {
  SharedDtor();
}

void MachineTimeSpec::SharedDtor() {
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_name_;
  }
  if (this != default_instance_) {
  }
}

void MachineTimeSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineTimeSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineTimeSpec_descriptor_;
}

const MachineTimeSpec& MachineTimeSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Sync_2eproto();  return *default_instance_;
}

MachineTimeSpec* MachineTimeSpec::default_instance_ = NULL;

MachineTimeSpec* MachineTimeSpec::New() const {
  return new MachineTimeSpec;
}

void MachineTimeSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machine_name()) {
      if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
        machine_name_->clear();
      }
    }
    gt_from_ = 0;
    gt_to_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineTimeSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machine_name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_name().data(), this->machine_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_gt_from;
        break;
      }
      
      // required float gt_from = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gt_from:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gt_from_)));
          set_has_gt_from();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_gt_to;
        break;
      }
      
      // required float gt_to = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_gt_to:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &gt_to_)));
          set_has_gt_to();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineTimeSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string machine_name = 1;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machine_name(), output);
  }
  
  // required float gt_from = 2;
  if (has_gt_from()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->gt_from(), output);
  }
  
  // required float gt_to = 3;
  if (has_gt_to()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->gt_to(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineTimeSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string machine_name = 1;
  if (has_machine_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_name().data(), this->machine_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine_name(), target);
  }
  
  // required float gt_from = 2;
  if (has_gt_from()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->gt_from(), target);
  }
  
  // required float gt_to = 3;
  if (has_gt_to()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->gt_to(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineTimeSpec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machine_name = 1;
    if (has_machine_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_name());
    }
    
    // required float gt_from = 2;
    if (has_gt_from()) {
      total_size += 1 + 4;
    }
    
    // required float gt_to = 3;
    if (has_gt_to()) {
      total_size += 1 + 4;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineTimeSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineTimeSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineTimeSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineTimeSpec::MergeFrom(const MachineTimeSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine_name()) {
      set_machine_name(from.machine_name());
    }
    if (from.has_gt_from()) {
      set_gt_from(from.gt_from());
    }
    if (from.has_gt_to()) {
      set_gt_to(from.gt_to());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineTimeSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineTimeSpec::CopyFrom(const MachineTimeSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineTimeSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void MachineTimeSpec::Swap(MachineTimeSpec* other) {
  if (other != this) {
    std::swap(machine_name_, other->machine_name_);
    std::swap(gt_from_, other->gt_from_);
    std::swap(gt_to_, other->gt_to_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineTimeSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineTimeSpec_descriptor_;
  metadata.reflection = MachineTimeSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineProcTime::kMachineTypeFieldNumber;
const int MachineProcTime::kProcTimeFieldNumber;
#endif  // !_MSC_VER

MachineProcTime::MachineProcTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineProcTime::InitAsDefaultInstance() {
}

MachineProcTime::MachineProcTime(const MachineProcTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineProcTime::SharedCtor() {
  _cached_size_ = 0;
  machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  proc_time_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineProcTime::~MachineProcTime() {
  SharedDtor();
}

void MachineProcTime::SharedDtor() {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_type_;
  }
  if (this != default_instance_) {
  }
}

void MachineProcTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineProcTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineProcTime_descriptor_;
}

const MachineProcTime& MachineProcTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Sync_2eproto();  return *default_instance_;
}

MachineProcTime* MachineProcTime::default_instance_ = NULL;

MachineProcTime* MachineProcTime::New() const {
  return new MachineProcTime;
}

void MachineProcTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machine_type()) {
      if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
        machine_type_->clear();
      }
    }
    proc_time_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineProcTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machine_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_proc_time;
        break;
      }
      
      // required uint32 proc_time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proc_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &proc_time_)));
          set_has_proc_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineProcTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string machine_type = 1;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machine_type(), output);
  }
  
  // required uint32 proc_time = 2;
  if (has_proc_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->proc_time(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineProcTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string machine_type = 1;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine_type(), target);
  }
  
  // required uint32 proc_time = 2;
  if (has_proc_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->proc_time(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineProcTime::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machine_type = 1;
    if (has_machine_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_type());
    }
    
    // required uint32 proc_time = 2;
    if (has_proc_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->proc_time());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineProcTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineProcTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineProcTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineProcTime::MergeFrom(const MachineProcTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine_type()) {
      set_machine_type(from.machine_type());
    }
    if (from.has_proc_time()) {
      set_proc_time(from.proc_time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineProcTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineProcTime::CopyFrom(const MachineProcTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineProcTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MachineProcTime::Swap(MachineProcTime* other) {
  if (other != this) {
    std::swap(machine_type_, other->machine_type_);
    std::swap(proc_time_, other->proc_time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineProcTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineProcTime_descriptor_;
  metadata.reflection = MachineProcTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineLightSpec::kMachineTypeFieldNumber;
const int MachineLightSpec::kLightsFieldNumber;
#endif  // !_MSC_VER

MachineLightSpec::MachineLightSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineLightSpec::InitAsDefaultInstance() {
}

MachineLightSpec::MachineLightSpec(const MachineLightSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineLightSpec::SharedCtor() {
  _cached_size_ = 0;
  machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineLightSpec::~MachineLightSpec() {
  SharedDtor();
}

void MachineLightSpec::SharedDtor() {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    delete machine_type_;
  }
  if (this != default_instance_) {
  }
}

void MachineLightSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineLightSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineLightSpec_descriptor_;
}

const MachineLightSpec& MachineLightSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Sync_2eproto();  return *default_instance_;
}

MachineLightSpec* MachineLightSpec::default_instance_ = NULL;

MachineLightSpec* MachineLightSpec::New() const {
  return new MachineLightSpec;
}

void MachineLightSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_machine_type()) {
      if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
        machine_type_->clear();
      }
    }
  }
  lights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineLightSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string machine_type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_machine_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->machine_type().data(), this->machine_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lights;
        break;
      }
      
      // repeated .llsf_msgs.LightSpec lights = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_lights;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineLightSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string machine_type = 1;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->machine_type(), output);
  }
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  for (int i = 0; i < this->lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lights(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineLightSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string machine_type = 1;
  if (has_machine_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->machine_type().data(), this->machine_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->machine_type(), target);
  }
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  for (int i = 0; i < this->lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lights(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineLightSpec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string machine_type = 1;
    if (has_machine_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->machine_type());
    }
    
  }
  // repeated .llsf_msgs.LightSpec lights = 2;
  total_size += 1 * this->lights_size();
  for (int i = 0; i < this->lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lights(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineLightSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineLightSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineLightSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineLightSpec::MergeFrom(const MachineLightSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  lights_.MergeFrom(from.lights_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_machine_type()) {
      set_machine_type(from.machine_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineLightSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineLightSpec::CopyFrom(const MachineLightSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineLightSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  for (int i = 0; i < lights_size(); i++) {
    if (!this->lights(i).IsInitialized()) return false;
  }
  return true;
}

void MachineLightSpec::Swap(MachineLightSpec* other) {
  if (other != this) {
    std::swap(machine_type_, other->machine_type_);
    lights_.Swap(&other->lights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineLightSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineLightSpec_descriptor_;
  metadata.reflection = MachineLightSpec_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MachineTypeSpec::kNameFieldNumber;
const int MachineTypeSpec::kTypeFieldNumber;
#endif  // !_MSC_VER

MachineTypeSpec::MachineTypeSpec()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MachineTypeSpec::InitAsDefaultInstance() {
}

MachineTypeSpec::MachineTypeSpec(const MachineTypeSpec& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MachineTypeSpec::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MachineTypeSpec::~MachineTypeSpec() {
  SharedDtor();
}

void MachineTypeSpec::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
  }
}

void MachineTypeSpec::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MachineTypeSpec::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MachineTypeSpec_descriptor_;
}

const MachineTypeSpec& MachineTypeSpec::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Sync_2eproto();  return *default_instance_;
}

MachineTypeSpec* MachineTypeSpec::default_instance_ = NULL;

MachineTypeSpec* MachineTypeSpec::New() const {
  return new MachineTypeSpec;
}

void MachineTypeSpec::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MachineTypeSpec::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }
      
      // required string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MachineTypeSpec::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MachineTypeSpec::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }
  
  // required string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MachineTypeSpec::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }
    
    // required string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MachineTypeSpec::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MachineTypeSpec* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MachineTypeSpec*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MachineTypeSpec::MergeFrom(const MachineTypeSpec& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MachineTypeSpec::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MachineTypeSpec::CopyFrom(const MachineTypeSpec& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MachineTypeSpec::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  
  return true;
}

void MachineTypeSpec::Swap(MachineTypeSpec* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MachineTypeSpec::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MachineTypeSpec_descriptor_;
  metadata.reflection = MachineTypeSpec_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SyncInfo_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncInfo_CompType_descriptor_;
}
bool SyncInfo_CompType_IsValid(int value) {
  switch(value) {
    case 5:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SyncInfo_CompType SyncInfo::COMP_ID;
const SyncInfo_CompType SyncInfo::MSG_TYPE;
const SyncInfo_CompType SyncInfo::CompType_MIN;
const SyncInfo_CompType SyncInfo::CompType_MAX;
const int SyncInfo::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SyncInfo::kMachinesFieldNumber;
const int SyncInfo::kOrdersFieldNumber;
const int SyncInfo::kDownTimesFieldNumber;
const int SyncInfo::kDeliveryGatesFieldNumber;
const int SyncInfo::kProcTimesFieldNumber;
const int SyncInfo::kExplorationLightsFieldNumber;
#endif  // !_MSC_VER

SyncInfo::SyncInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncInfo::InitAsDefaultInstance() {
}

SyncInfo::SyncInfo(const SyncInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncInfo::~SyncInfo() {
  SharedDtor();
}

void SyncInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncInfo_descriptor_;
}

const SyncInfo& SyncInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Sync_2eproto();  return *default_instance_;
}

SyncInfo* SyncInfo::default_instance_ = NULL;

SyncInfo* SyncInfo::New() const {
  return new SyncInfo;
}

void SyncInfo::Clear() {
  machines_.Clear();
  orders_.Clear();
  down_times_.Clear();
  delivery_gates_.Clear();
  proc_times_.Clear();
  exploration_lights_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .llsf_msgs.MachineTypeSpec machines = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_machines:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_machines()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_machines;
        if (input->ExpectTag(26)) goto parse_orders;
        break;
      }
      
      // repeated .llsf_msgs.Order orders = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orders:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_orders()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orders;
        if (input->ExpectTag(34)) goto parse_down_times;
        break;
      }
      
      // repeated .llsf_msgs.MachineTimeSpec down_times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_down_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_down_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_down_times;
        if (input->ExpectTag(42)) goto parse_delivery_gates;
        break;
      }
      
      // repeated .llsf_msgs.MachineTimeSpec delivery_gates = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_delivery_gates:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_delivery_gates()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_delivery_gates;
        if (input->ExpectTag(50)) goto parse_proc_times;
        break;
      }
      
      // repeated .llsf_msgs.MachineProcTime proc_times = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_proc_times:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proc_times()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_proc_times;
        if (input->ExpectTag(58)) goto parse_exploration_lights;
        break;
      }
      
      // repeated .llsf_msgs.MachineLightSpec exploration_lights = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_exploration_lights:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_exploration_lights()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_exploration_lights;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .llsf_msgs.MachineTypeSpec machines = 2;
  for (int i = 0; i < this->machines_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->machines(i), output);
  }
  
  // repeated .llsf_msgs.Order orders = 3;
  for (int i = 0; i < this->orders_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->orders(i), output);
  }
  
  // repeated .llsf_msgs.MachineTimeSpec down_times = 4;
  for (int i = 0; i < this->down_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->down_times(i), output);
  }
  
  // repeated .llsf_msgs.MachineTimeSpec delivery_gates = 5;
  for (int i = 0; i < this->delivery_gates_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->delivery_gates(i), output);
  }
  
  // repeated .llsf_msgs.MachineProcTime proc_times = 6;
  for (int i = 0; i < this->proc_times_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->proc_times(i), output);
  }
  
  // repeated .llsf_msgs.MachineLightSpec exploration_lights = 7;
  for (int i = 0; i < this->exploration_lights_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->exploration_lights(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .llsf_msgs.MachineTypeSpec machines = 2;
  for (int i = 0; i < this->machines_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->machines(i), target);
  }
  
  // repeated .llsf_msgs.Order orders = 3;
  for (int i = 0; i < this->orders_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->orders(i), target);
  }
  
  // repeated .llsf_msgs.MachineTimeSpec down_times = 4;
  for (int i = 0; i < this->down_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->down_times(i), target);
  }
  
  // repeated .llsf_msgs.MachineTimeSpec delivery_gates = 5;
  for (int i = 0; i < this->delivery_gates_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->delivery_gates(i), target);
  }
  
  // repeated .llsf_msgs.MachineProcTime proc_times = 6;
  for (int i = 0; i < this->proc_times_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->proc_times(i), target);
  }
  
  // repeated .llsf_msgs.MachineLightSpec exploration_lights = 7;
  for (int i = 0; i < this->exploration_lights_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->exploration_lights(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncInfo::ByteSize() const {
  int total_size = 0;
  
  // repeated .llsf_msgs.MachineTypeSpec machines = 2;
  total_size += 1 * this->machines_size();
  for (int i = 0; i < this->machines_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->machines(i));
  }
  
  // repeated .llsf_msgs.Order orders = 3;
  total_size += 1 * this->orders_size();
  for (int i = 0; i < this->orders_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->orders(i));
  }
  
  // repeated .llsf_msgs.MachineTimeSpec down_times = 4;
  total_size += 1 * this->down_times_size();
  for (int i = 0; i < this->down_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->down_times(i));
  }
  
  // repeated .llsf_msgs.MachineTimeSpec delivery_gates = 5;
  total_size += 1 * this->delivery_gates_size();
  for (int i = 0; i < this->delivery_gates_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->delivery_gates(i));
  }
  
  // repeated .llsf_msgs.MachineProcTime proc_times = 6;
  total_size += 1 * this->proc_times_size();
  for (int i = 0; i < this->proc_times_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proc_times(i));
  }
  
  // repeated .llsf_msgs.MachineLightSpec exploration_lights = 7;
  total_size += 1 * this->exploration_lights_size();
  for (int i = 0; i < this->exploration_lights_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->exploration_lights(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncInfo::MergeFrom(const SyncInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  machines_.MergeFrom(from.machines_);
  orders_.MergeFrom(from.orders_);
  down_times_.MergeFrom(from.down_times_);
  delivery_gates_.MergeFrom(from.delivery_gates_);
  proc_times_.MergeFrom(from.proc_times_);
  exploration_lights_.MergeFrom(from.exploration_lights_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncInfo::CopyFrom(const SyncInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncInfo::IsInitialized() const {
  
  for (int i = 0; i < machines_size(); i++) {
    if (!this->machines(i).IsInitialized()) return false;
  }
  for (int i = 0; i < orders_size(); i++) {
    if (!this->orders(i).IsInitialized()) return false;
  }
  for (int i = 0; i < down_times_size(); i++) {
    if (!this->down_times(i).IsInitialized()) return false;
  }
  for (int i = 0; i < delivery_gates_size(); i++) {
    if (!this->delivery_gates(i).IsInitialized()) return false;
  }
  for (int i = 0; i < proc_times_size(); i++) {
    if (!this->proc_times(i).IsInitialized()) return false;
  }
  for (int i = 0; i < exploration_lights_size(); i++) {
    if (!this->exploration_lights(i).IsInitialized()) return false;
  }
  return true;
}

void SyncInfo::Swap(SyncInfo* other) {
  if (other != this) {
    machines_.Swap(&other->machines_);
    orders_.Swap(&other->orders_);
    down_times_.Swap(&other->down_times_);
    delivery_gates_.Swap(&other->delivery_gates_);
    proc_times_.Swap(&other->proc_times_);
    exploration_lights_.Swap(&other->exploration_lights_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncInfo_descriptor_;
  metadata.reflection = SyncInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* InitiateSync_CompType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitiateSync_CompType_descriptor_;
}
bool InitiateSync_CompType_IsValid(int value) {
  switch(value) {
    case 6:
    case 2000:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const InitiateSync_CompType InitiateSync::COMP_ID;
const InitiateSync_CompType InitiateSync::MSG_TYPE;
const InitiateSync_CompType InitiateSync::CompType_MIN;
const InitiateSync_CompType InitiateSync::CompType_MAX;
const int InitiateSync::CompType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
#endif  // !_MSC_VER

InitiateSync::InitiateSync()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InitiateSync::InitAsDefaultInstance() {
}

InitiateSync::InitiateSync(const InitiateSync& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InitiateSync::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InitiateSync::~InitiateSync() {
  SharedDtor();
}

void InitiateSync::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InitiateSync::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InitiateSync::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InitiateSync_descriptor_;
}

const InitiateSync& InitiateSync::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Sync_2eproto();  return *default_instance_;
}

InitiateSync* InitiateSync::default_instance_ = NULL;

InitiateSync* InitiateSync::New() const {
  return new InitiateSync;
}

void InitiateSync::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InitiateSync::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void InitiateSync::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InitiateSync::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InitiateSync::ByteSize() const {
  int total_size = 0;
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InitiateSync::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InitiateSync* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InitiateSync*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InitiateSync::MergeFrom(const InitiateSync& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InitiateSync::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InitiateSync::CopyFrom(const InitiateSync& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InitiateSync::IsInitialized() const {
  
  return true;
}

void InitiateSync::Swap(InitiateSync* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InitiateSync::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InitiateSync_descriptor_;
  metadata.reflection = InitiateSync_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

// @@protoc_insertion_point(global_scope)
