// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Sync.proto

#ifndef PROTOBUF_Sync_2eproto__INCLUDED
#define PROTOBUF_Sync_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "MachineInfo.pb.h"
#include "OrderInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Sync_2eproto();
void protobuf_AssignDesc_Sync_2eproto();
void protobuf_ShutdownFile_Sync_2eproto();

class MachineTimeSpec;
class MachineProcTime;
class MachineLightSpec;
class MachineTypeSpec;
class SyncInfo;
class InitiateSync;

enum SyncInfo_CompType {
  SyncInfo_CompType_COMP_ID = 2000,
  SyncInfo_CompType_MSG_TYPE = 5
};
bool SyncInfo_CompType_IsValid(int value);
const SyncInfo_CompType SyncInfo_CompType_CompType_MIN = SyncInfo_CompType_MSG_TYPE;
const SyncInfo_CompType SyncInfo_CompType_CompType_MAX = SyncInfo_CompType_COMP_ID;
const int SyncInfo_CompType_CompType_ARRAYSIZE = SyncInfo_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* SyncInfo_CompType_descriptor();
inline const ::std::string& SyncInfo_CompType_Name(SyncInfo_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    SyncInfo_CompType_descriptor(), value);
}
inline bool SyncInfo_CompType_Parse(
    const ::std::string& name, SyncInfo_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SyncInfo_CompType>(
    SyncInfo_CompType_descriptor(), name, value);
}
enum InitiateSync_CompType {
  InitiateSync_CompType_COMP_ID = 2000,
  InitiateSync_CompType_MSG_TYPE = 6
};
bool InitiateSync_CompType_IsValid(int value);
const InitiateSync_CompType InitiateSync_CompType_CompType_MIN = InitiateSync_CompType_MSG_TYPE;
const InitiateSync_CompType InitiateSync_CompType_CompType_MAX = InitiateSync_CompType_COMP_ID;
const int InitiateSync_CompType_CompType_ARRAYSIZE = InitiateSync_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* InitiateSync_CompType_descriptor();
inline const ::std::string& InitiateSync_CompType_Name(InitiateSync_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    InitiateSync_CompType_descriptor(), value);
}
inline bool InitiateSync_CompType_Parse(
    const ::std::string& name, InitiateSync_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<InitiateSync_CompType>(
    InitiateSync_CompType_descriptor(), name, value);
}
// ===================================================================

class MachineTimeSpec : public ::google::protobuf::Message {
 public:
  MachineTimeSpec();
  virtual ~MachineTimeSpec();
  
  MachineTimeSpec(const MachineTimeSpec& from);
  
  inline MachineTimeSpec& operator=(const MachineTimeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineTimeSpec& default_instance();
  
  void Swap(MachineTimeSpec* other);
  
  // implements Message ----------------------------------------------
  
  MachineTimeSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineTimeSpec& from);
  void MergeFrom(const MachineTimeSpec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string machine_name = 1;
  inline bool has_machine_name() const;
  inline void clear_machine_name();
  static const int kMachineNameFieldNumber = 1;
  inline const ::std::string& machine_name() const;
  inline void set_machine_name(const ::std::string& value);
  inline void set_machine_name(const char* value);
  inline void set_machine_name(const char* value, size_t size);
  inline ::std::string* mutable_machine_name();
  inline ::std::string* release_machine_name();
  
  // required float gt_from = 2;
  inline bool has_gt_from() const;
  inline void clear_gt_from();
  static const int kGtFromFieldNumber = 2;
  inline float gt_from() const;
  inline void set_gt_from(float value);
  
  // required float gt_to = 3;
  inline bool has_gt_to() const;
  inline void clear_gt_to();
  static const int kGtToFieldNumber = 3;
  inline float gt_to() const;
  inline void set_gt_to(float value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineTimeSpec)
 private:
  inline void set_has_machine_name();
  inline void clear_has_machine_name();
  inline void set_has_gt_from();
  inline void clear_has_gt_from();
  inline void set_has_gt_to();
  inline void clear_has_gt_to();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_name_;
  float gt_from_;
  float gt_to_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_Sync_2eproto();
  friend void protobuf_AssignDesc_Sync_2eproto();
  friend void protobuf_ShutdownFile_Sync_2eproto();
  
  void InitAsDefaultInstance();
  static MachineTimeSpec* default_instance_;
};
// -------------------------------------------------------------------

class MachineProcTime : public ::google::protobuf::Message {
 public:
  MachineProcTime();
  virtual ~MachineProcTime();
  
  MachineProcTime(const MachineProcTime& from);
  
  inline MachineProcTime& operator=(const MachineProcTime& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineProcTime& default_instance();
  
  void Swap(MachineProcTime* other);
  
  // implements Message ----------------------------------------------
  
  MachineProcTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineProcTime& from);
  void MergeFrom(const MachineProcTime& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string machine_type = 1;
  inline bool has_machine_type() const;
  inline void clear_machine_type();
  static const int kMachineTypeFieldNumber = 1;
  inline const ::std::string& machine_type() const;
  inline void set_machine_type(const ::std::string& value);
  inline void set_machine_type(const char* value);
  inline void set_machine_type(const char* value, size_t size);
  inline ::std::string* mutable_machine_type();
  inline ::std::string* release_machine_type();
  
  // required uint32 proc_time = 2;
  inline bool has_proc_time() const;
  inline void clear_proc_time();
  static const int kProcTimeFieldNumber = 2;
  inline ::google::protobuf::uint32 proc_time() const;
  inline void set_proc_time(::google::protobuf::uint32 value);
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineProcTime)
 private:
  inline void set_has_machine_type();
  inline void clear_has_machine_type();
  inline void set_has_proc_time();
  inline void clear_has_proc_time();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_type_;
  ::google::protobuf::uint32 proc_time_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Sync_2eproto();
  friend void protobuf_AssignDesc_Sync_2eproto();
  friend void protobuf_ShutdownFile_Sync_2eproto();
  
  void InitAsDefaultInstance();
  static MachineProcTime* default_instance_;
};
// -------------------------------------------------------------------

class MachineLightSpec : public ::google::protobuf::Message {
 public:
  MachineLightSpec();
  virtual ~MachineLightSpec();
  
  MachineLightSpec(const MachineLightSpec& from);
  
  inline MachineLightSpec& operator=(const MachineLightSpec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineLightSpec& default_instance();
  
  void Swap(MachineLightSpec* other);
  
  // implements Message ----------------------------------------------
  
  MachineLightSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineLightSpec& from);
  void MergeFrom(const MachineLightSpec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string machine_type = 1;
  inline bool has_machine_type() const;
  inline void clear_machine_type();
  static const int kMachineTypeFieldNumber = 1;
  inline const ::std::string& machine_type() const;
  inline void set_machine_type(const ::std::string& value);
  inline void set_machine_type(const char* value);
  inline void set_machine_type(const char* value, size_t size);
  inline ::std::string* mutable_machine_type();
  inline ::std::string* release_machine_type();
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 2;
  inline const ::llsf_msgs::LightSpec& lights(int index) const;
  inline ::llsf_msgs::LightSpec* mutable_lights(int index);
  inline ::llsf_msgs::LightSpec* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
      mutable_lights();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineLightSpec)
 private:
  inline void set_has_machine_type();
  inline void clear_has_machine_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* machine_type_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec > lights_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Sync_2eproto();
  friend void protobuf_AssignDesc_Sync_2eproto();
  friend void protobuf_ShutdownFile_Sync_2eproto();
  
  void InitAsDefaultInstance();
  static MachineLightSpec* default_instance_;
};
// -------------------------------------------------------------------

class MachineTypeSpec : public ::google::protobuf::Message {
 public:
  MachineTypeSpec();
  virtual ~MachineTypeSpec();
  
  MachineTypeSpec(const MachineTypeSpec& from);
  
  inline MachineTypeSpec& operator=(const MachineTypeSpec& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineTypeSpec& default_instance();
  
  void Swap(MachineTypeSpec* other);
  
  // implements Message ----------------------------------------------
  
  MachineTypeSpec* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineTypeSpec& from);
  void MergeFrom(const MachineTypeSpec& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // required string type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline const ::std::string& type() const;
  inline void set_type(const ::std::string& value);
  inline void set_type(const char* value);
  inline void set_type(const char* value, size_t size);
  inline ::std::string* mutable_type();
  inline ::std::string* release_type();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineTypeSpec)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::std::string* type_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  friend void  protobuf_AddDesc_Sync_2eproto();
  friend void protobuf_AssignDesc_Sync_2eproto();
  friend void protobuf_ShutdownFile_Sync_2eproto();
  
  void InitAsDefaultInstance();
  static MachineTypeSpec* default_instance_;
};
// -------------------------------------------------------------------

class SyncInfo : public ::google::protobuf::Message {
 public:
  SyncInfo();
  virtual ~SyncInfo();
  
  SyncInfo(const SyncInfo& from);
  
  inline SyncInfo& operator=(const SyncInfo& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncInfo& default_instance();
  
  void Swap(SyncInfo* other);
  
  // implements Message ----------------------------------------------
  
  SyncInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncInfo& from);
  void MergeFrom(const SyncInfo& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef SyncInfo_CompType CompType;
  static const CompType COMP_ID = SyncInfo_CompType_COMP_ID;
  static const CompType MSG_TYPE = SyncInfo_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return SyncInfo_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    SyncInfo_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    SyncInfo_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    SyncInfo_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return SyncInfo_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return SyncInfo_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return SyncInfo_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .llsf_msgs.MachineTypeSpec machines = 2;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 2;
  inline const ::llsf_msgs::MachineTypeSpec& machines(int index) const;
  inline ::llsf_msgs::MachineTypeSpec* mutable_machines(int index);
  inline ::llsf_msgs::MachineTypeSpec* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeSpec >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeSpec >*
      mutable_machines();
  
  // repeated .llsf_msgs.Order orders = 3;
  inline int orders_size() const;
  inline void clear_orders();
  static const int kOrdersFieldNumber = 3;
  inline const ::llsf_msgs::Order& orders(int index) const;
  inline ::llsf_msgs::Order* mutable_orders(int index);
  inline ::llsf_msgs::Order* add_orders();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Order >&
      orders() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Order >*
      mutable_orders();
  
  // repeated .llsf_msgs.MachineTimeSpec down_times = 4;
  inline int down_times_size() const;
  inline void clear_down_times();
  static const int kDownTimesFieldNumber = 4;
  inline const ::llsf_msgs::MachineTimeSpec& down_times(int index) const;
  inline ::llsf_msgs::MachineTimeSpec* mutable_down_times(int index);
  inline ::llsf_msgs::MachineTimeSpec* add_down_times();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >&
      down_times() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >*
      mutable_down_times();
  
  // repeated .llsf_msgs.MachineTimeSpec delivery_gates = 5;
  inline int delivery_gates_size() const;
  inline void clear_delivery_gates();
  static const int kDeliveryGatesFieldNumber = 5;
  inline const ::llsf_msgs::MachineTimeSpec& delivery_gates(int index) const;
  inline ::llsf_msgs::MachineTimeSpec* mutable_delivery_gates(int index);
  inline ::llsf_msgs::MachineTimeSpec* add_delivery_gates();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >&
      delivery_gates() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >*
      mutable_delivery_gates();
  
  // repeated .llsf_msgs.MachineProcTime proc_times = 6;
  inline int proc_times_size() const;
  inline void clear_proc_times();
  static const int kProcTimesFieldNumber = 6;
  inline const ::llsf_msgs::MachineProcTime& proc_times(int index) const;
  inline ::llsf_msgs::MachineProcTime* mutable_proc_times(int index);
  inline ::llsf_msgs::MachineProcTime* add_proc_times();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineProcTime >&
      proc_times() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineProcTime >*
      mutable_proc_times();
  
  // repeated .llsf_msgs.MachineLightSpec exploration_lights = 7;
  inline int exploration_lights_size() const;
  inline void clear_exploration_lights();
  static const int kExplorationLightsFieldNumber = 7;
  inline const ::llsf_msgs::MachineLightSpec& exploration_lights(int index) const;
  inline ::llsf_msgs::MachineLightSpec* mutable_exploration_lights(int index);
  inline ::llsf_msgs::MachineLightSpec* add_exploration_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineLightSpec >&
      exploration_lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineLightSpec >*
      mutable_exploration_lights();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.SyncInfo)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeSpec > machines_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Order > orders_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec > down_times_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec > delivery_gates_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineProcTime > proc_times_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineLightSpec > exploration_lights_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  friend void  protobuf_AddDesc_Sync_2eproto();
  friend void protobuf_AssignDesc_Sync_2eproto();
  friend void protobuf_ShutdownFile_Sync_2eproto();
  
  void InitAsDefaultInstance();
  static SyncInfo* default_instance_;
};
// -------------------------------------------------------------------

class InitiateSync : public ::google::protobuf::Message {
 public:
  InitiateSync();
  virtual ~InitiateSync();
  
  InitiateSync(const InitiateSync& from);
  
  inline InitiateSync& operator=(const InitiateSync& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const InitiateSync& default_instance();
  
  void Swap(InitiateSync* other);
  
  // implements Message ----------------------------------------------
  
  InitiateSync* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InitiateSync& from);
  void MergeFrom(const InitiateSync& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef InitiateSync_CompType CompType;
  static const CompType COMP_ID = InitiateSync_CompType_COMP_ID;
  static const CompType MSG_TYPE = InitiateSync_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return InitiateSync_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    InitiateSync_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    InitiateSync_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    InitiateSync_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return InitiateSync_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return InitiateSync_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return InitiateSync_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.InitiateSync)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[1];
  
  friend void  protobuf_AddDesc_Sync_2eproto();
  friend void protobuf_AssignDesc_Sync_2eproto();
  friend void protobuf_ShutdownFile_Sync_2eproto();
  
  void InitAsDefaultInstance();
  static InitiateSync* default_instance_;
};
// ===================================================================


// ===================================================================

// MachineTimeSpec

// required string machine_name = 1;
inline bool MachineTimeSpec::has_machine_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineTimeSpec::set_has_machine_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineTimeSpec::clear_has_machine_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineTimeSpec::clear_machine_name() {
  if (machine_name_ != &::google::protobuf::internal::kEmptyString) {
    machine_name_->clear();
  }
  clear_has_machine_name();
}
inline const ::std::string& MachineTimeSpec::machine_name() const {
  return *machine_name_;
}
inline void MachineTimeSpec::set_machine_name(const ::std::string& value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void MachineTimeSpec::set_machine_name(const char* value) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(value);
}
inline void MachineTimeSpec::set_machine_name(const char* value, size_t size) {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  machine_name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MachineTimeSpec::mutable_machine_name() {
  set_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    machine_name_ = new ::std::string;
  }
  return machine_name_;
}
inline ::std::string* MachineTimeSpec::release_machine_name() {
  clear_has_machine_name();
  if (machine_name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_name_;
    machine_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required float gt_from = 2;
inline bool MachineTimeSpec::has_gt_from() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineTimeSpec::set_has_gt_from() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineTimeSpec::clear_has_gt_from() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineTimeSpec::clear_gt_from() {
  gt_from_ = 0;
  clear_has_gt_from();
}
inline float MachineTimeSpec::gt_from() const {
  return gt_from_;
}
inline void MachineTimeSpec::set_gt_from(float value) {
  set_has_gt_from();
  gt_from_ = value;
}

// required float gt_to = 3;
inline bool MachineTimeSpec::has_gt_to() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineTimeSpec::set_has_gt_to() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineTimeSpec::clear_has_gt_to() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineTimeSpec::clear_gt_to() {
  gt_to_ = 0;
  clear_has_gt_to();
}
inline float MachineTimeSpec::gt_to() const {
  return gt_to_;
}
inline void MachineTimeSpec::set_gt_to(float value) {
  set_has_gt_to();
  gt_to_ = value;
}

// -------------------------------------------------------------------

// MachineProcTime

// required string machine_type = 1;
inline bool MachineProcTime::has_machine_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineProcTime::set_has_machine_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineProcTime::clear_has_machine_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineProcTime::clear_machine_type() {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    machine_type_->clear();
  }
  clear_has_machine_type();
}
inline const ::std::string& MachineProcTime::machine_type() const {
  return *machine_type_;
}
inline void MachineProcTime::set_machine_type(const ::std::string& value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void MachineProcTime::set_machine_type(const char* value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void MachineProcTime::set_machine_type(const char* value, size_t size) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MachineProcTime::mutable_machine_type() {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  return machine_type_;
}
inline ::std::string* MachineProcTime::release_machine_type() {
  clear_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_type_;
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required uint32 proc_time = 2;
inline bool MachineProcTime::has_proc_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineProcTime::set_has_proc_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineProcTime::clear_has_proc_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineProcTime::clear_proc_time() {
  proc_time_ = 0u;
  clear_has_proc_time();
}
inline ::google::protobuf::uint32 MachineProcTime::proc_time() const {
  return proc_time_;
}
inline void MachineProcTime::set_proc_time(::google::protobuf::uint32 value) {
  set_has_proc_time();
  proc_time_ = value;
}

// -------------------------------------------------------------------

// MachineLightSpec

// required string machine_type = 1;
inline bool MachineLightSpec::has_machine_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineLightSpec::set_has_machine_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineLightSpec::clear_has_machine_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineLightSpec::clear_machine_type() {
  if (machine_type_ != &::google::protobuf::internal::kEmptyString) {
    machine_type_->clear();
  }
  clear_has_machine_type();
}
inline const ::std::string& MachineLightSpec::machine_type() const {
  return *machine_type_;
}
inline void MachineLightSpec::set_machine_type(const ::std::string& value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void MachineLightSpec::set_machine_type(const char* value) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(value);
}
inline void MachineLightSpec::set_machine_type(const char* value, size_t size) {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  machine_type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MachineLightSpec::mutable_machine_type() {
  set_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    machine_type_ = new ::std::string;
  }
  return machine_type_;
}
inline ::std::string* MachineLightSpec::release_machine_type() {
  clear_has_machine_type();
  if (machine_type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = machine_type_;
    machine_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .llsf_msgs.LightSpec lights = 2;
inline int MachineLightSpec::lights_size() const {
  return lights_.size();
}
inline void MachineLightSpec::clear_lights() {
  lights_.Clear();
}
inline const ::llsf_msgs::LightSpec& MachineLightSpec::lights(int index) const {
  return lights_.Get(index);
}
inline ::llsf_msgs::LightSpec* MachineLightSpec::mutable_lights(int index) {
  return lights_.Mutable(index);
}
inline ::llsf_msgs::LightSpec* MachineLightSpec::add_lights() {
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
MachineLightSpec::lights() const {
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
MachineLightSpec::mutable_lights() {
  return &lights_;
}

// -------------------------------------------------------------------

// MachineTypeSpec

// required string name = 1;
inline bool MachineTypeSpec::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineTypeSpec::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineTypeSpec::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineTypeSpec::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MachineTypeSpec::name() const {
  return *name_;
}
inline void MachineTypeSpec::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MachineTypeSpec::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MachineTypeSpec::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MachineTypeSpec::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MachineTypeSpec::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// required string type = 2;
inline bool MachineTypeSpec::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MachineTypeSpec::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MachineTypeSpec::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MachineTypeSpec::clear_type() {
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    type_->clear();
  }
  clear_has_type();
}
inline const ::std::string& MachineTypeSpec::type() const {
  return *type_;
}
inline void MachineTypeSpec::set_type(const ::std::string& value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MachineTypeSpec::set_type(const char* value) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(value);
}
inline void MachineTypeSpec::set_type(const char* value, size_t size) {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  type_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MachineTypeSpec::mutable_type() {
  set_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    type_ = new ::std::string;
  }
  return type_;
}
inline ::std::string* MachineTypeSpec::release_type() {
  clear_has_type();
  if (type_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = type_;
    type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// -------------------------------------------------------------------

// SyncInfo

// repeated .llsf_msgs.MachineTypeSpec machines = 2;
inline int SyncInfo::machines_size() const {
  return machines_.size();
}
inline void SyncInfo::clear_machines() {
  machines_.Clear();
}
inline const ::llsf_msgs::MachineTypeSpec& SyncInfo::machines(int index) const {
  return machines_.Get(index);
}
inline ::llsf_msgs::MachineTypeSpec* SyncInfo::mutable_machines(int index) {
  return machines_.Mutable(index);
}
inline ::llsf_msgs::MachineTypeSpec* SyncInfo::add_machines() {
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeSpec >&
SyncInfo::machines() const {
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTypeSpec >*
SyncInfo::mutable_machines() {
  return &machines_;
}

// repeated .llsf_msgs.Order orders = 3;
inline int SyncInfo::orders_size() const {
  return orders_.size();
}
inline void SyncInfo::clear_orders() {
  orders_.Clear();
}
inline const ::llsf_msgs::Order& SyncInfo::orders(int index) const {
  return orders_.Get(index);
}
inline ::llsf_msgs::Order* SyncInfo::mutable_orders(int index) {
  return orders_.Mutable(index);
}
inline ::llsf_msgs::Order* SyncInfo::add_orders() {
  return orders_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Order >&
SyncInfo::orders() const {
  return orders_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::Order >*
SyncInfo::mutable_orders() {
  return &orders_;
}

// repeated .llsf_msgs.MachineTimeSpec down_times = 4;
inline int SyncInfo::down_times_size() const {
  return down_times_.size();
}
inline void SyncInfo::clear_down_times() {
  down_times_.Clear();
}
inline const ::llsf_msgs::MachineTimeSpec& SyncInfo::down_times(int index) const {
  return down_times_.Get(index);
}
inline ::llsf_msgs::MachineTimeSpec* SyncInfo::mutable_down_times(int index) {
  return down_times_.Mutable(index);
}
inline ::llsf_msgs::MachineTimeSpec* SyncInfo::add_down_times() {
  return down_times_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >&
SyncInfo::down_times() const {
  return down_times_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >*
SyncInfo::mutable_down_times() {
  return &down_times_;
}

// repeated .llsf_msgs.MachineTimeSpec delivery_gates = 5;
inline int SyncInfo::delivery_gates_size() const {
  return delivery_gates_.size();
}
inline void SyncInfo::clear_delivery_gates() {
  delivery_gates_.Clear();
}
inline const ::llsf_msgs::MachineTimeSpec& SyncInfo::delivery_gates(int index) const {
  return delivery_gates_.Get(index);
}
inline ::llsf_msgs::MachineTimeSpec* SyncInfo::mutable_delivery_gates(int index) {
  return delivery_gates_.Mutable(index);
}
inline ::llsf_msgs::MachineTimeSpec* SyncInfo::add_delivery_gates() {
  return delivery_gates_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >&
SyncInfo::delivery_gates() const {
  return delivery_gates_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineTimeSpec >*
SyncInfo::mutable_delivery_gates() {
  return &delivery_gates_;
}

// repeated .llsf_msgs.MachineProcTime proc_times = 6;
inline int SyncInfo::proc_times_size() const {
  return proc_times_.size();
}
inline void SyncInfo::clear_proc_times() {
  proc_times_.Clear();
}
inline const ::llsf_msgs::MachineProcTime& SyncInfo::proc_times(int index) const {
  return proc_times_.Get(index);
}
inline ::llsf_msgs::MachineProcTime* SyncInfo::mutable_proc_times(int index) {
  return proc_times_.Mutable(index);
}
inline ::llsf_msgs::MachineProcTime* SyncInfo::add_proc_times() {
  return proc_times_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineProcTime >&
SyncInfo::proc_times() const {
  return proc_times_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineProcTime >*
SyncInfo::mutable_proc_times() {
  return &proc_times_;
}

// repeated .llsf_msgs.MachineLightSpec exploration_lights = 7;
inline int SyncInfo::exploration_lights_size() const {
  return exploration_lights_.size();
}
inline void SyncInfo::clear_exploration_lights() {
  exploration_lights_.Clear();
}
inline const ::llsf_msgs::MachineLightSpec& SyncInfo::exploration_lights(int index) const {
  return exploration_lights_.Get(index);
}
inline ::llsf_msgs::MachineLightSpec* SyncInfo::mutable_exploration_lights(int index) {
  return exploration_lights_.Mutable(index);
}
inline ::llsf_msgs::MachineLightSpec* SyncInfo::add_exploration_lights() {
  return exploration_lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineLightSpec >&
SyncInfo::exploration_lights() const {
  return exploration_lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineLightSpec >*
SyncInfo::mutable_exploration_lights() {
  return &exploration_lights_;
}

// -------------------------------------------------------------------

// InitiateSync


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::SyncInfo_CompType>() {
  return ::llsf_msgs::SyncInfo_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::InitiateSync_CompType>() {
  return ::llsf_msgs::InitiateSync_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Sync_2eproto__INCLUDED
