// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: LightSignals.proto

#ifndef PROTOBUF_LightSignals_2eproto__INCLUDED
#define PROTOBUF_LightSignals_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2004001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
#include "Pose2D.pb.h"
#include "MachineInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace llsf_msgs {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_LightSignals_2eproto();
void protobuf_AssignDesc_LightSignals_2eproto();
void protobuf_ShutdownFile_LightSignals_2eproto();

class MachineSignal;
class AllMachineSignals;

enum MachineSignal_CompType {
  MachineSignal_CompType_COMP_ID = 2000,
  MachineSignal_CompType_MSG_TYPE = 242
};
bool MachineSignal_CompType_IsValid(int value);
const MachineSignal_CompType MachineSignal_CompType_CompType_MIN = MachineSignal_CompType_MSG_TYPE;
const MachineSignal_CompType MachineSignal_CompType_CompType_MAX = MachineSignal_CompType_COMP_ID;
const int MachineSignal_CompType_CompType_ARRAYSIZE = MachineSignal_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* MachineSignal_CompType_descriptor();
inline const ::std::string& MachineSignal_CompType_Name(MachineSignal_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    MachineSignal_CompType_descriptor(), value);
}
inline bool MachineSignal_CompType_Parse(
    const ::std::string& name, MachineSignal_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MachineSignal_CompType>(
    MachineSignal_CompType_descriptor(), name, value);
}
enum AllMachineSignals_CompType {
  AllMachineSignals_CompType_COMP_ID = 2000,
  AllMachineSignals_CompType_MSG_TYPE = 324
};
bool AllMachineSignals_CompType_IsValid(int value);
const AllMachineSignals_CompType AllMachineSignals_CompType_CompType_MIN = AllMachineSignals_CompType_MSG_TYPE;
const AllMachineSignals_CompType AllMachineSignals_CompType_CompType_MAX = AllMachineSignals_CompType_COMP_ID;
const int AllMachineSignals_CompType_CompType_ARRAYSIZE = AllMachineSignals_CompType_CompType_MAX + 1;

const ::google::protobuf::EnumDescriptor* AllMachineSignals_CompType_descriptor();
inline const ::std::string& AllMachineSignals_CompType_Name(AllMachineSignals_CompType value) {
  return ::google::protobuf::internal::NameOfEnum(
    AllMachineSignals_CompType_descriptor(), value);
}
inline bool AllMachineSignals_CompType_Parse(
    const ::std::string& name, AllMachineSignals_CompType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<AllMachineSignals_CompType>(
    AllMachineSignals_CompType_descriptor(), name, value);
}
// ===================================================================

class MachineSignal : public ::google::protobuf::Message {
 public:
  MachineSignal();
  virtual ~MachineSignal();
  
  MachineSignal(const MachineSignal& from);
  
  inline MachineSignal& operator=(const MachineSignal& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const MachineSignal& default_instance();
  
  void Swap(MachineSignal* other);
  
  // implements Message ----------------------------------------------
  
  MachineSignal* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MachineSignal& from);
  void MergeFrom(const MachineSignal& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef MachineSignal_CompType CompType;
  static const CompType COMP_ID = MachineSignal_CompType_COMP_ID;
  static const CompType MSG_TYPE = MachineSignal_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return MachineSignal_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    MachineSignal_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    MachineSignal_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    MachineSignal_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return MachineSignal_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return MachineSignal_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return MachineSignal_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  
  // repeated .llsf_msgs.LightSpec lights = 2;
  inline int lights_size() const;
  inline void clear_lights();
  static const int kLightsFieldNumber = 2;
  inline const ::llsf_msgs::LightSpec& lights(int index) const;
  inline ::llsf_msgs::LightSpec* mutable_lights(int index);
  inline ::llsf_msgs::LightSpec* add_lights();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
      lights() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
      mutable_lights();
  
  // required .llsf_msgs.Pose2D pose = 3;
  inline bool has_pose() const;
  inline void clear_pose();
  static const int kPoseFieldNumber = 3;
  inline const ::llsf_msgs::Pose2D& pose() const;
  inline ::llsf_msgs::Pose2D* mutable_pose();
  inline ::llsf_msgs::Pose2D* release_pose();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.MachineSignal)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_pose();
  inline void clear_has_pose();
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::std::string* name_;
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec > lights_;
  ::llsf_msgs::Pose2D* pose_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  friend void  protobuf_AddDesc_LightSignals_2eproto();
  friend void protobuf_AssignDesc_LightSignals_2eproto();
  friend void protobuf_ShutdownFile_LightSignals_2eproto();
  
  void InitAsDefaultInstance();
  static MachineSignal* default_instance_;
};
// -------------------------------------------------------------------

class AllMachineSignals : public ::google::protobuf::Message {
 public:
  AllMachineSignals();
  virtual ~AllMachineSignals();
  
  AllMachineSignals(const AllMachineSignals& from);
  
  inline AllMachineSignals& operator=(const AllMachineSignals& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const AllMachineSignals& default_instance();
  
  void Swap(AllMachineSignals* other);
  
  // implements Message ----------------------------------------------
  
  AllMachineSignals* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AllMachineSignals& from);
  void MergeFrom(const AllMachineSignals& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  typedef AllMachineSignals_CompType CompType;
  static const CompType COMP_ID = AllMachineSignals_CompType_COMP_ID;
  static const CompType MSG_TYPE = AllMachineSignals_CompType_MSG_TYPE;
  static inline bool CompType_IsValid(int value) {
    return AllMachineSignals_CompType_IsValid(value);
  }
  static const CompType CompType_MIN =
    AllMachineSignals_CompType_CompType_MIN;
  static const CompType CompType_MAX =
    AllMachineSignals_CompType_CompType_MAX;
  static const int CompType_ARRAYSIZE =
    AllMachineSignals_CompType_CompType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  CompType_descriptor() {
    return AllMachineSignals_CompType_descriptor();
  }
  static inline const ::std::string& CompType_Name(CompType value) {
    return AllMachineSignals_CompType_Name(value);
  }
  static inline bool CompType_Parse(const ::std::string& name,
      CompType* value) {
    return AllMachineSignals_CompType_Parse(name, value);
  }
  
  // accessors -------------------------------------------------------
  
  // repeated .llsf_msgs.MachineSignal machines = 1;
  inline int machines_size() const;
  inline void clear_machines();
  static const int kMachinesFieldNumber = 1;
  inline const ::llsf_msgs::MachineSignal& machines(int index) const;
  inline ::llsf_msgs::MachineSignal* mutable_machines(int index);
  inline ::llsf_msgs::MachineSignal* add_machines();
  inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineSignal >&
      machines() const;
  inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineSignal >*
      mutable_machines();
  
  // @@protoc_insertion_point(class_scope:llsf_msgs.AllMachineSignals)
 private:
  
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  
  ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineSignal > machines_;
  
  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];
  
  friend void  protobuf_AddDesc_LightSignals_2eproto();
  friend void protobuf_AssignDesc_LightSignals_2eproto();
  friend void protobuf_ShutdownFile_LightSignals_2eproto();
  
  void InitAsDefaultInstance();
  static AllMachineSignals* default_instance_;
};
// ===================================================================


// ===================================================================

// MachineSignal

// required string name = 1;
inline bool MachineSignal::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MachineSignal::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MachineSignal::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MachineSignal::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MachineSignal::name() const {
  return *name_;
}
inline void MachineSignal::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MachineSignal::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MachineSignal::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MachineSignal::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MachineSignal::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}

// repeated .llsf_msgs.LightSpec lights = 2;
inline int MachineSignal::lights_size() const {
  return lights_.size();
}
inline void MachineSignal::clear_lights() {
  lights_.Clear();
}
inline const ::llsf_msgs::LightSpec& MachineSignal::lights(int index) const {
  return lights_.Get(index);
}
inline ::llsf_msgs::LightSpec* MachineSignal::mutable_lights(int index) {
  return lights_.Mutable(index);
}
inline ::llsf_msgs::LightSpec* MachineSignal::add_lights() {
  return lights_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >&
MachineSignal::lights() const {
  return lights_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::LightSpec >*
MachineSignal::mutable_lights() {
  return &lights_;
}

// required .llsf_msgs.Pose2D pose = 3;
inline bool MachineSignal::has_pose() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MachineSignal::set_has_pose() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MachineSignal::clear_has_pose() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MachineSignal::clear_pose() {
  if (pose_ != NULL) pose_->::llsf_msgs::Pose2D::Clear();
  clear_has_pose();
}
inline const ::llsf_msgs::Pose2D& MachineSignal::pose() const {
  return pose_ != NULL ? *pose_ : *default_instance_->pose_;
}
inline ::llsf_msgs::Pose2D* MachineSignal::mutable_pose() {
  set_has_pose();
  if (pose_ == NULL) pose_ = new ::llsf_msgs::Pose2D;
  return pose_;
}
inline ::llsf_msgs::Pose2D* MachineSignal::release_pose() {
  clear_has_pose();
  ::llsf_msgs::Pose2D* temp = pose_;
  pose_ = NULL;
  return temp;
}

// -------------------------------------------------------------------

// AllMachineSignals

// repeated .llsf_msgs.MachineSignal machines = 1;
inline int AllMachineSignals::machines_size() const {
  return machines_.size();
}
inline void AllMachineSignals::clear_machines() {
  machines_.Clear();
}
inline const ::llsf_msgs::MachineSignal& AllMachineSignals::machines(int index) const {
  return machines_.Get(index);
}
inline ::llsf_msgs::MachineSignal* AllMachineSignals::mutable_machines(int index) {
  return machines_.Mutable(index);
}
inline ::llsf_msgs::MachineSignal* AllMachineSignals::add_machines() {
  return machines_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineSignal >&
AllMachineSignals::machines() const {
  return machines_;
}
inline ::google::protobuf::RepeatedPtrField< ::llsf_msgs::MachineSignal >*
AllMachineSignals::mutable_machines() {
  return &machines_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace llsf_msgs

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::MachineSignal_CompType>() {
  return ::llsf_msgs::MachineSignal_CompType_descriptor();
}
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::llsf_msgs::AllMachineSignals_CompType>() {
  return ::llsf_msgs::AllMachineSignals_CompType_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_LightSignals_2eproto__INCLUDED
